---------------------------------------------------  **  COMANDOS UTEIS  ** ----------------------------------------------------------

python run2.py runserver           = inicia o server

python -m venv venv                = criar o ambiente virtual

.\venv\Scripts\Activate            
.\venv\Scripts\Activate.ps1        = inicializar o ambiente virtual

pip freeze > requirements.txt      = armazenar as modulo(bibliotecas) que é utilizada nesse projeto
pip install -r requirements.txt    = instala as bibliotecas necessarias para rodar o programa

git push origin --delete <branch>  = deletar beanch do repositorio

Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned    = executar no powershell para ter permissao

python -m pip install --upgrade pip      = atualiza o pip   


git config --global user.email "lfalmeida97@hotmail.com"
git config --global user.name "Fellipe97"



git init
git remote add origin https://github.com/Fellipe97/twitter_basico_Python.git
git branch -M main                                                                    = Passo a passo para criar repositorio
git push -u origin main


echo "# twitter_basico_Python" >> README.md
git init
git add README.md
git commit -m "first commit"                                                          = Passo a passo para criar repositorio (fazer td pelo visual studio)
git branch -M main
git remote add origin https://github.com/Fellipe97/twitter_basico_Python.git
git push -u origin main
--------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------  **  AULA 1  ** --------------------------------------------------------------

Instale o python e depois o Flask usando essa linha no terminal: pip install Flask

1 - importar a biblioteca:

        from flask import Flask

--------------------------------------------------------------------------------------------------------------------------------------

2 - Criar a instancia, especificar qual é o arquivo, principal ou secundario

        app = Flask(__name__)      #controla a aplicação inteira, todo o flask está nessa variavel

--------------------------------------------------------------------------------------------------------------------------------------

3 - If de controle, ter a certeza que o flask vai começar com o arquivo principal
        
        if __name__ == "__main__":
            app.run()

--------------------------------------------------------------------------------------------------------------------------------------

4 - criar a pagina para a aplicação acessar  

        @app.route("/")             #metodo definir rota
        def index():                
            return "Hello World!"


                Executando a rota que aparece no terminal ira aparecer no site o "Hello World!".
--------------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------  **  AULA 2  ** --------------------------------------------------------------

No terminal instale: 
        
        pip install virtualenv 

Serve para criar um ambiente a parte do pc, como se fosse uma maquina virtual para rodar a sua aplicação que não tenhha
nada instalado dele e com isso nenhum programa para atrapalhar o executamento da aplicação.

1 - Vamos inicializar o ambiente virtual, virtualenv:

         python -m venv venv

--------------------------------------------------------------------------------------------------------------------------------------

2 - Entrar no ambiente virtual

        .\venv\Scripts\activate.ps1

--------------------------------------------------------------------------------------------------------------------------------------

3 - Instalar o flask no ambiente virtual

        .\venv\Scripts\pip3.8 install flask

--------------------------------------------------------------------------------------------------------------------------------------

4 - Verificar se tudo está instalado certinho

        .\venv\Scripts\pip3.8 freeze

--------------------------------------------------------------------------------------------------------------------------------------

5 - Se quiser gravar essas informações em um txt (o que está instalado no ambiente virtual)

        .\venv\Scripts\pip3.8 freeze > requeriment.txt

--------------------------------------------------------------------------------------------------------------------------------------

6 - Instalar apartir do .txt

        .\venv\Scripts\pip3.8 install -r requeriment.txt

--------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------  **  AULA 2 CONTINUACÃO ** ----------------------------------------------------------

Criar o conceito MVC

Na pasta principal criei uma pasta chamada "app" dentro dessa paste crie mais 4 pastas com nome:

    - "controllers"
    - "models"
    - "templates"
    - "static"

M = model       =     banco de dados   = "models"
V = viewrs      =      parte visual    = "templates" + "static"
C = controllers =  controlador (ações) =  "controllers"


1 - Mover o "app.py" para a pasta nova "app"

2- Ronomear o "app.py" para "__init__"

        ?? __init__ ??

- É um arquivo para quando trabalhamos com modulo (conjunto de definições: funções, classe, ...) 
- Indica que tem um modulo principal e que nas outras pastas tera submodulos

--------------------------------------------------------------------------------------------------------------------------------------

3 - Criar os submodulos (__init__.py) nas pastas ("controllers" e "models")

4 - O "__init__.py" que está na pasta principal "app" vai ficar assim:

        from flask import Flask


        app = Flask(__name__)

        if __name__ == "__main__":
            app.run() 

--------------------------------------------------------------------------------------------------------------------------------------

5 - Vamos criar um "default.py" na pasta "controllers" e colocar esse codigo no "default.py":

        from app import app        # da pasta app estamos importando a variavel app ; from app (modulo) import app (variavel)

        @app.route("/")
        def index():
            return "Hello World!!"

--------------------------------------------------------------------------------------------------------------------------------------

6 - O "__init__.py" que está na pasta principal "app" vai ficar assim:


        from flask import Flask

        app = Flask(__name__)


E vamos criar um arquivo "run.py" na pasta "CURSOFLASK" aonde está todas as pastas do projeto e 
dentro desse aquivo vai ficar assim:

        from app import app

        if __name__ == "__main__":
            app.run()

        from app.controllers import default

--------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------  **  AULA 3  ** --------------------------------------------------------------

1 - Para conseguir se comunicar com banco de dados iremos instalar o SQLAlchemy(ORM) executando isso dentro do venv:

        pip install flask-sqlalchemy

Obs: não esqueça de verificar se você está no ambiente virtual, (venv) em verde

--------------------------------------------------------------------------------------------------------------------------------------


2 - Vamos alterar o "__init__.py" da pasta "app" para estabelecer a conexão com o banco de dados e o codigo vai ficar assim:


        from flask import Flask
        from flask_sqlalchemy import SQLAlchemy    # from flask_(nome do modulo) import (classe) 

        app = Flask(__name__)
        app.config['SQLAlCHEMY_DATABASE_URI'] = 'sqlite:///storage.db'      # URI de conexao com o banco de dados,ou seja, o caminho que passar até o banco de dados (estabelecer a conexão)
        db = SQLAlchemy(app)    # SQLAlchemy(instancia do flask)

        from app.controllers import default

--------------------------------------------------------------------------------------------------------------------------------------

3 - Criar as tabelas do banco de dados, crie o arquivo "tables.py" ma pasta "models":

        from enum import unique
        from app import db


        # db.Model = classe do SQLAlchemy que tras um modelo de banco de dados padrão
        class User(db.Model):      #Primeira coluna da tabela
            __tablename__= "users"  #o nome da tabela do banco de dados

            id = db.Column(db.Integer, primary_key=True)  #criando a coluna e o que ela suporta; db.Integer = recebe numero inteiro;  primary_key = chave primaria; unique =  evitar repetição (ser único)
            usernane = db.Column(db.String, unique=True)
            password = db.Column(db.String)
            name = db.Column(db.String)
            email = db.Column(db.String, unique=True)

            #construtor que inicializa todos os campos (campos obrigatorios)
            def __init__(self, username, password, name, email):
                self.username = username
                self.password = password
                self.name = name
                self.email = email
            
            # representação, vai ser utilizado para bnusca no banco de dados
            def __repr__(self):
                return "<User %r>" % self.username


        class Post(db.Model):   #Segunda coluna da tabela
            __tablename__= "posts"

            id = db.Column(db.Integer, primary_key=True)
            content = db.Column(db.Text)
            user_id = db.Column(db.Integer, db.ForeignKey('users.id'))  # id do usuario; referencia ao banco de dados: Users ( db.ForeignKey('users.id')

            user = db.relationship('User', foreign_keys=user_id)  # quando buscar o post, vai vê no campo user não só o id mas tb todas as informações do usuario

            def __init__ (self,content,user_id):
                self.content = content
                self.user_id = user_id
            
            def __repr__(self):
                return "<Post %r>" % self.id


        class Follow(db.Model):   #Terceira coluna da tabela
            __tablename__ = "follow"

            id = db.Column(db.Integer, primary_key=True)
            user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
            follower_id = db.Column(db.Integer, db.ForeignKey('users.id'))

            user = db.relationship('User', foreign_keys=user_id)
            follower = db.relationship('User', foreign_keys=follower_id)

--------------------------------------------------------------------------------------------------------------------------------------            

-------------------------------------------------------  **  AULA 4  ** --------------------------------------------------------------

Instalar:
        pip install flask-migrate
        pip install flask-script
 
 1 - Vamos alterar o arquivo "__init__.py" da pasta "app"

        from flask import Flask
        from flask_sqlalchemy import SQLAlchemy    # from flask_(nome do modulo) import (classe) 
        from flask_script import Manager
        from flask_migrate import Migrate, MigrateCommand


        app = Flask(__name__)
        app.config['SQLAlCHEMY_DATABASE_URI'] = 'sqlite:///storage.db'      # URI de conexao com o banco de dados,ou seja, o caminho que passar até o banco de dados (estabelecer a conexão)
        db = SQLAlchemy(app)    # SQLAlchemy(instancia do flask)
        migrate = Migrate (app,db)  #instanciando para fazer nossas transições com o banco de dados, portando, precisa receber o nosso app e o nosso banco

        manager = Manager(app) #cuidar dos comandos que será excutado para inicializar a aplicação
        manager.add_command('db', MigrateCommand) # adcicionando um comando chamado db

        from app.controllers import default

--------------------------------------------------------------------------------------------------------------------------------------

2 - Vamos mudar a forma de excução da nossa aplicação para podermos adicionar comandos de execução nela, alterar o arquivo "run.py" da pasta "CURSOFLASK"

        from app import manager

        if __name__ == "__main__":
                manager.run()

Comando disoniveis:   não é comando o que tiver no #

        python run.py runserver                                #(não é comando): executa a aplicação                             
        python run.py db init                                  #(não é comando): cria uma pasta chamada migrations (salvar tds as migrações do banco) 



--------------------------------------------------------------------------------------------------------------------------------------

3 - Tive problemas com a versão mais atualizada, pois o pacote Flask_Script foi descontinuado. Portando, faça downgrade dos pacotes:

        pip install Flask==1.1.4
        pip install Flask-Migrate==2.0.1
        Flask-Script==2.0.6

Execute: 

        python run.py runserver
        python run.py db init
 
 --------------------------------------------------------------------------------------------------------------------------------------

 4 - Vamos começar a migrar o banco

        python run.py db migrate

Se aparecer o erro : py:851: UserWarning: Neither SQLALCHEMY_DATABASE_URI nor SQLALCHEackages\flask_sqlalchemy\__init__.

        apaga e reescreve essa linha (arquivo "__init__" da pasta "app"):
                app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///storage.db'

--------------------------------------------------------------------------------------------------------------------------------------

5 - Para visualizar o banco de dados criando utilize o Sqliteman, o banco estara vazio

--------------------------------------------------------------------------------------------------------------------------------------

6 - Vamos preencher(atualizar) o banco, execute essa linha no terminal:
        
        python run.py db upgrade              

Não se preocupe se aparentemente não atualizar no Sqliteman, só se preocupe se parecer algum erro no terminal (se escreveu o comando errado)

--------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------  **  AULA 5  ** --------------------------------------------------------------

1 - Vamos criar um arquivo "config.py", para cuidar das nosssas configurações, na pasta "CURSOFLASK".

config.py:

        DEBUG = True  #podemos alterar o arquivo e ele atualiza sozinho, sem precisar reiniciar o servidor (ctrl+C e inicializar de novo).

        SQLALCHEMY_DATABASE_URI = 'sqlite:///storage.db'  # URI de conexao com o banco de dados,ou seja, o caminho que passar até o banco de dados (estabelecer a conexão)
        SQLALCHEMY_TRACK_MODIFICATIONS = True    #acabar com o warming


__init__ (da pasta "app"):

        from flask import Flask
        from flask_sqlalchemy import SQLAlchemy    # from flask_(nome do modulo) import (classe) 
        from flask_script import Manager
        from flask_migrate import Migrate, MigrateCommand

        app = Flask(__name__)
        app.config.from_object('config') 

        db = SQLAlchemy(app)    # SQLAlchemy(instancia do flask)
        migrate = Migrate (app, db)

        manager = Manager(app)
        manager.add_command('db', MigrateCommand)

        from app.controllers import default

Fazemos um arquivo que está com todas as configurações e tiramos o warming.

--------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------  **  AULA 6  ** --------------------------------------------------------------

Podemos ter mais de uma rota para chegar no site que desejamos, iremos vê sovre isso.

No arquivo "default.py" na pasta "controllers":

        from app import app

        #Primeira pagina
        #As duas rotas vão chegar no mesmo destino
        @app.route("/index")         #Primeira rota pra acessar a pagina da "Primeira pagina!"
        @app.route("/")              #Segunda rota pra acessar a pagina da "Primeira pagina!"
        def index():
                return "Primeira pagina!"

        #Segunda pagina
        @app.route("/teste/", methods=['GET'])   #Como utilizar um methods
        def test():
                return "Segunda pagina!"

        #Terceira pagina
        @app.route( "/teste/<name>")  # receber nome por parametro
        def teste(name):
                return "Olá, %s!" % name

Se colocar no google http://127.0.0.1:5000/teste/ vai exibir "Segunda Pagina!" 

Obs: Na terceira pagina vc ira digitar no navegador assim:

http://127.0.0.1:5000/teste/(informe o nome)

--------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------  **  AULA 7  ** --------------------------------------------------------------

Vamos deixar nossa pagina bonita? Parar de retornar só hellow world?

1 - Primeiro vamos deixar o Hello world mais bonito,como? altere o arquivo "default.py":

        from app import app

        @app.route("/index")
        @app.route("/")
        def index():
                return """
                <html>
                <head>
                        <title>Hello World!</title>
                </head>
                <body>
                        <h1>Hello world!</h1>
                </body>
                </html>
                """

--------------------------------------------------------------------------------------------------------------------------------------

2 - Apos você executar no navegador, vai perceber que mudamos o nome da aba e o tamanho do texto.Conseguimos fazer isso
utilizando um return que retorna uma string que tem html dentro dele, mas imagina o tamanho que iria ficar se fizer 
o twitter todo por esse return. Logo, vamos retornar em uma função.

Alterando o codigo:

        from flask import render_template
        from app import app



        @app.route("/index")
        @app.route("/")
        def index():
                return render_template('index.html')

--------------------------------------------------------------------------------------------------------------------------------------

3 - Vamos criar o html "index.html" na pasta "templates"

(Pra quem utiliza Visual Code) Para facilitar, escreve "!" e aperta "enter" ele ira gerar um html automatico assim:
Obs:Alias qualquer tag vc pode fazer assim: h1 e apertar o "tab" que ele ira completar para você.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>

Vamos alterar um pouco:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>hello World</title>
</head>
<body>
    <h1>Hello world!</h1>
</body>
</html>

--------------------------------------------------------------------------------------------------------------------------------------

4 - Fazer com que o html receba variavel e faça teste.Vamos alterar o "default.py" para receber o valor pra variavel e vamos alterar
o "index.html" para fazer o teste e retornar a pagina.

default.py:

from flask import render_template
from app import app



@app.route("/index/<user>")
@app.route("/", defaults={"user":None})
def index(user):
    return render_template('index.html' , user = user)




index.html:

<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Toilter</title>
</head>
<body>
    <h1>Toilter</h1>
    {% if user %}
    <p>Bem-vind ao Toilter, {{user}}!</p>
    {% else %}
    <p>Bem-vindo ao Toilter</p>
    {% endif %}
</body>
</html>

Podemos reparar que utilizamos o python entre as chaves contendo o {% %} para fazer bloco de codigo e para printar alguma 
variavel utilizamos {{}}.

--------------------------------------------------------------------------------------------------------------------------------------

5 - Fazer dowload do bootstrap versão 3.3.7, descompactar, pegar o conteudo da pasta e colocar na pasta "static".

Agora vamos linkar o nosso html com o css que está na pasta, no arquivo "index.html" deixe o codigo assim:


<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Toilter</title>
    <link rel="stylesheet" href="{{ url_for('static',filename= 'css/bootstrap.min.css')}}">
</head>
<body>
    <h1>Toilter</h1>
    {% if user %}
    <p>Bem-vindo ao Toilter, {{user}}!</p>
    {% else %}
    <p>Bem-vindo ao Toilter</p>
    {% endif %}
    <script> src="https://ajax.googleleapis.com/ajax/libs/jquery/1.12.4/jquery.main.js"</script>
    <script src="{{ url_for('static', filename= 'js/bootstrap.min.js')}}"></script>
</body>
</html>

--------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------  **  AULA 8  ** --------------------------------------------------------------

1 - Criar a "base.h" na pasta "templates" e inserir esse codigo:


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">
    <link rel="canonical" href="https://getbootstrap.com/docs/3.3/examples/jumbotron-narrow/">

    <title>Narrow Jumbotron Template for Bootstrap</title>

    <!-- Bootstrap core CSS -->
    <link href="../../dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <link href="../../assets/css/ie10-viewport-bug-workaround.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="jumbotron-narrow.css" rel="stylesheet">

    <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
    <!--[if lt IE 9]><script src="../../assets/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <script src="../../assets/js/ie-emulation-modes-warning.js"></script>

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>

    <div class="container">
      <div class="header clearfix">
        <nav>
          <ul class="nav nav-pills pull-right">
            <li role="presentation" class="active"><a href="#">Home</a></li>
            <li role="presentation"><a href="#">About</a></li>
            <li role="presentation"><a href="#">Contact</a></li>
          </ul>
        </nav>
        <h3 class="text-muted">Project name</h3>
      </div>

      <div class="jumbotron">
        <h1>Jumbotron heading</h1>
        <p class="lead">Cras justo odio, dapibus ac facilisis in, egestas eget quam. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>
        <p><a class="btn btn-lg btn-success" href="#" role="button">Sign up today</a></p>
      </div>

      <div class="row marketing">
        <div class="col-lg-6">
          <h4>Subheading</h4>
          <p>Donec id elit non mi porta gravida at eget metus. Maecenas faucibus mollis interdum.</p>

          <h4>Subheading</h4>
          <p>Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras mattis consectetur purus sit amet fermentum.</p>

          <h4>Subheading</h4>
          <p>Maecenas sed diam eget risus varius blandit sit amet non magna.</p>
        </div>

        <div class="col-lg-6">
          <h4>Subheading</h4>
          <p>Donec id elit non mi porta gravida at eget metus. Maecenas faucibus mollis interdum.</p>

          <h4>Subheading</h4>
          <p>Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras mattis consectetur purus sit amet fermentum.</p>

          <h4>Subheading</h4>
          <p>Maecenas sed diam eget risus varius blandit sit amet non magna.</p>
        </div>
      </div>

      <footer class="footer">
        <p>&copy; 2016 Company, Inc.</p>
      </footer>

    </div> <!-- /container -->


    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="../../assets/js/ie10-viewport-bug-workaround.js"></script>
  </body>
</html>



Modificado:

<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Toilter</title>

    <!-- Bootstrap core CSS -->
    <link href="{{url_for('static', filename='css/bootstrap.min.css')}}" rel="stylesheet">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>

    <div class="container">
      <div class="header clearfix">
        <nav>
          <ul class="nav nav-pills pull-right">
            <li role="presentation" class="active"><a href="#">Home</a></li>
            <li role="presentation"><a href="#">About</a></li>
            <li role="presentation"><a href="#">Contact</a></li>
          </ul>
        </nav>
        <h3 class="text-muted">Toilter</h3>
      </div>

      <div class="jumbotron">
        <h1>Jumbotron heading</h1>
        <p class="lead">Cras justo odio, dapibus ac facilisis in, egestas eget quam. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>
        <p><a class="btn btn-lg btn-success" href="#" role="button">Sign up today</a></p>
      </div>

      <div class="row marketing">
        <div class="col-lg-6">
          <h4>Subheading</h4>
          <p>Donec id elit non mi porta gravida at eget metus. Maecenas faucibus mollis interdum.</p>

          <h4>Subheading</h4>
          <p>Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras mattis consectetur purus sit amet fermentum.</p>

          <h4>Subheading</h4>
          <p>Maecenas sed diam eget risus varius blandit sit amet non magna.</p>
        </div>

        <div class="col-lg-6">
          <h4>Subheading</h4>
          <p>Donec id elit non mi porta gravida at eget metus. Maecenas faucibus mollis interdum.</p>

          <h4>Subheading</h4>
          <p>Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Cras mattis consectetur purus sit amet fermentum.</p>

          <h4>Subheading</h4>
          <p>Maecenas sed diam eget risus varius blandit sit amet non magna.</p>
        </div>
      </div>

      <footer class="footer">
        <p>&copy; 2016 Company, Inc.</p>
      </footer>

    </div> <!-- /container -->

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="{{url_for('static', filename='js/bootstrap.min.js')}}"></script>
  </body>
</html>


--------------------------------------------------------------------------------------------------------------------------------------

2 - Criando a rota para o login, altere o arquivo "default.py":

from flask import render_template
from app import app



@app.route("/index/<user>")
@app.route("/", defaults={"user":None})
def index(user):
    return render_template('base.html' , user = user)


@app.route("/login")
def login():
    return render_template('base.html')

Agora sua tela de login é a mesma do twitter, vamos ter 3 arquivos:
        1 - o que tem em comun
        2 - login
        3 - pagina principal

 --------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------  **  AULA 9  ** --------------------------------------------------------------

1 - Criar a pagina de login, instalar a biblioteca para o login. Para evitar problema de versão instale a mesma versão 
da aula " pip install flask-wtf==0.12  " 

Vamos criar um arquivo "forms.py" na pasta "models" e inserir isso nele:

from flask_wtf import Form
from wtforms import StringField, PasswordField, BooleanField
from wtforms.validators import DataRequired


class LoginForm(Form):
    username = StringField("username", validators=[DataRequired()])
    password = PasswordField("password", validators=[DataRequired()])
    remember_me = BooleanField("remember_me")

--------------------------------------------------------------------------------------------------------------------------------------

2 - Alterando o "default.py":

from flask import render_template
from app import app

from app.models.forms import LoginForm


@app.route("/index")
@app.route("/")
def index():
    return render_template('index.html')


@app.route("/login")
def login():
    form = LoginForm()
    return render_template('login.html', form=form)

--------------------------------------------------------------------------------------------------------------------------------------
Tive problema de versão e consegui resolver baixando isso aqui:   pip install werkzeug==0.16.0

3 - Criar p "login.html" na pasta "templates":

{% extends 'base.html' %}
{% block content %}
    {{form}}
{% endblock %}

--------------------------------------------------------------------------------------------------------------------------------------

4 - Secret key, modificar o arquivo "config.py":

DEBUG = True      #podemos alterar o arquivo e ele atualiza sozinho, sem precisar reiniciar o servidor (ctrl+C e inicializar de novo).

SQLALCHEMY_DATABASE_URI = 'sqlite:///storage.db'  # URI de conexao com o banco de dados,ou seja, o caminho que passar até o banco de dados (estabelecer a conexão)
SQLALCHEMY_TRACK_MODIFICATIONS = True    #acabar com o warming

SECRET_KEY = 'um-nome-bem-seguro'

--------------------------------------------------------------------------------------------------------------------------------------

5 - Alterando a pagina de login, "login.html":

{% extends 'base.html' %}
{% block content %}
    <div class="col-md-4 col-md-offset-4">
        <form action="" method="POST">
            <div class="form-group">
                <label>Username</label>
                {{form.username(class="form-control", placeholder="seu_usuario")}}
            </div>
            <div class="form-group">
                <label>Password</label>
                {{form.password(class="form-control")}}
            </div>
            <div class="checkbox">
                <label>
                    {{form.remember_me}} Remember me
                </label>
            </div>
            <button type="submit" class="btn btn-default">Submit</button>
        </form>
    </div>
{% endblock %}

--------------------------------------------------------------------------------------------------------------------------------------

"login.html":

{% extends 'base.html' %}

{% block content %}
    <div class="col-md-4 col-md-offset-4">
        <br><br><h2>Login</h2><br>
        <form action="" method="POST">
            {{ form.csrf_token }}
            <div class="form-group">
                <label>Username</label>
                {{form.username(class="form-control", placeholder="seu_usuario")}}
                {% if form.errors.username %}
                <div class="alert alert-danger" role="alert">
                    {{ form.errors.username }}
                </div>
                {% endif %}
            </div>
            <div class="form-group">
                <label>Password</label>
                {{form.password(class="form-control")}}
                {% if form.errors.password %}
                <div class="alert alert-danger" role="alert">
                    {{ form.errors.password }}
                </div>
                {% endif %}
            </div>
            <div class="checkbox">
                <label>
                    {{form.remember_me}} Remember me
                </label>
            </div>
            <button type="submit" class="btn btn-default">Submit</button>
        </form>
    </div>
{% endblock %}




"default.html":

from flask import render_template
from app import app

from app.models.forms import LoginForm


@app.route("/index")
@app.route("/")
def index():
    return render_template('index.html')


@app.route("/login", methods=["GET","POST"])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        print(form.username.data)
        print(form.password.data)
    else:
        print(form.errors)
    return render_template('login.html', form=form)

    --------------------------------------------------------------------------------------------------------------------------------------

    -------------------------------------------------------  **  AULA 10  ** -------------------------------------------------------------
    
